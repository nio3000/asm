#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib') unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/../lib')

require 'optparse'
require	'Asm/require_all_cli.rb'

module Asm
	
	#
	#
	# Print all Register locations (and their values) and the current value of memory location the PC is pointing to in cli
	def self.printAllRegs( v_machine, loader )
		i = 0
		while i < 16
			self.printReg("r" + i.to_s, v_machine, loader)
			i = i + 1
		end
		pc =  Asm::Magic::Register::Location::Program_counter
		puts("Program Counter Value: " + v_machine.get_memory_value(pc).to_s)
	end
	
	#
	#
	# prints Register location  and Register value to cli
	def self.printReg(register_literal, v_machine, loader)
		location = Asm::BCPU::Memory::Location.new(loader.word_from_register_literal( register_literal ).the_bits)
		puts("Register: " + location.to_s + " -> " + v_machine.get_memory_value(location).to_s)
	end
	
	#
	#
	# Prints out the location and value of the program counter
	#def self.printPC(literal, v_machine, loader)
	#	location = Asm::BCPU::Memory::Location.new(loader.word_from_register_literal( register_literal ).the_bits)
	#	puts("Register: " + location.to_s + " -> " + v_machine.get_memory_value(location).to_s)
	#end
	
	def self.on_init()
		puts("Enter in the file you wish to run: ")
		a_file_path = gets.chomp
		the_BCPU	= Asm::Virtual_Machine.new
		the_Loader	= Asm::Loader.new( the_BCPU )
		
		the_messages = the_Loader.load( a_file_path )
		# process the messages
		the_processed_message	= ''
		the_Tohru_Honda	= 0
		the_messages.each { |this_message|
			the_processed_message << this_message << "\n"
			the_Tohru_Honda += 1
		}
		the_processed_message << the_Tohru_Honda.to_s << ' messages caught during loading attempt.' << "\n"	# will give output even if no messages arise.
		puts(the_processed_message)
		
		printAllRegs(the_BCPU, the_Loader)
		run = true
		while (run)
			command = gets.chomp
			
			if command == "s"
				the_BCPU.advance_once
				
			elsif command == "r"
				#run
				
			elsif command == "x"
				run = false
				
			else
				puts("command " + command + " was not recognize by cli")
			end
			
			printAllRegs(the_BCPU, the_Loader)
		end
	end
end

Asm.on_init